type User {
  id: ID!
  username: String!
  name: String!
  email: String!
  token: String
  lists: [List!]!
}

type List {
  id: ID!
  name: String!
  isPublic: Boolean!
  owner: User!
  tasks: [Task!]!
}

type Task {
  id: ID!
  title: String!
  content: String
  isPublic: Boolean!
  list: List
}

type LoginResponse {
  token: String!
}

type Query {
  ping: String
  getUsers: [User]
  getUser(id: ID, username: String, email: String): User
  login(email: String!, password: String!): LoginResponse!
  me: User!
}

input inputCreateUser {
  username: String!
  name: String!
  email: String!
  password: String!
}

input inputUpdateUser {
  id: ID!
  username: String
  name: String
  email: String
  password: String
  token: String
}

type Mutation {
  createUser(data: inputCreateUser!): User!
  updateUser(data: inputUpdateUser!): User!
  deleteUser(id: ID!): User!
}
