type User {
  id: ID!
  username: String!
  name: String!
  email: String!
  lists: [List!]!
}

type List {
  id: ID!
  name: String!
  isPublic: Boolean!
  owner: User!
  tasks: [Task!]!
}

type Task {
  id: ID!
  title: String!
  content: String
  isPublic: Boolean!
  list: List
}

type LoginResponse {
  token: String!
}

type Query {
  ping: String
  getUsers: [User]
  getUser(id: ID, username: String, email: String): User
  login(email: String!, password: String!): LoginResponse!
  me: User!
  getLists: [List]
  getList(id: ID): List
  getTasks: [Task]
  getTask(id: ID): Task
}

input inputCreateUser {
  username: String!
  name: String!
  email: String!
  password: String!
}

input inputUpdateUser {
  id: ID!
  username: String
  name: String
  email: String
  password: String
}

input inputCreateList {
  name: String!
  isPublic: Boolean!
}

input inputUpdateList {
  id: ID!
  name: String
  isPublic: Boolean
}

input inputCreateTask {
  title: String!
  content: String
  isPublic: Boolean!
  listId: ID!
}

input inputUpdateTask {
  id: ID!
  title: String
  content: String
  isPublic: Boolean
}

type Mutation {
  createUser(data: inputCreateUser!): User!
  updateUser(data: inputUpdateUser!): User!
  deleteUser(id: ID!): User!
  createList(data: inputCreateList!): List!
  updateList(data: inputUpdateList!): List!
  deleteList(id: ID!): List!
  createTask(data: inputCreateTask!): Task!
  updateTask(data: inputUpdateTask!): Task!
  deleteTask(id: ID!): Task!
}
